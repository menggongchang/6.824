package main

import "os"
import "fmt"
import "mapreduce"
import "unicode"
import "strings"
import "sort"
import "strconv"

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// TODO: you should complete this to do the inverted index challenge
	resealt := make([]mapreduce.KeyValue, 0)
	var temp mapreduce.KeyValue

	f := func(c rune) bool {
		return !unicode.IsLetter(c) //&& !unicode.IsNumber(c)
	}
	for _, key := range strings.FieldsFunc(value, f) {
		temp.Key = key
		temp.Value = document
		resealt = append(resealt, temp)
	}
	return resealt
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// TODO: you should complete this to do the inverted index challenge
	//每篇文章的数目
	documentNumMap := make(map[string]int)
	for _, document := range values {
		documentNumMap[document]++
	}
	// //相同次数的文章集合
	// numDocumentMap := make(map[int][]string)
	// for document, number := range documentNumMap {
	// 	numDocumentMap[number] = append(numDocumentMap[number], document)
	// }
	// //根据key排序
	// documentNums := make([]int, 0)
	// for number, _ := range numDocumentMap {
	// 	documentNums = append(documentNums, number)
	// }
	// sort.Ints(documentNums)

	// //输出
	// documents:=make([]string,0)
	// for index := 0; index < len(documentNums); index++ {
	// 	documentNum := documentNums[index]
	// 	documents = append(documents,numDocumentMap[documentNum]...)
	// }
	// return strconv.Itoa(len(documentNumMap)) + " " + strings.Join(documents, ",")

	documents:=make([]string,0)
	for document,_:=range documentNumMap{
		documents = append(documents,document)
	}
	sort.Strings(documents)
	return strconv.Itoa(len(documentNumMap)) + " " + strings.Join(documents, ",")	
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
